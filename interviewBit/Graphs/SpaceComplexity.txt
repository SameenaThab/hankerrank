SpaceComplexity of fibonacci series

no of nodes in binary tree = 2^(k+1) - 1, where is height of tree

         1
    2          3
4       5   6       7

no of nodes at each level = 2^(level) where level starts from 0;

No of nodes = 1+2+4+ ... 2^k = (2^(k+1)-1)/(2-1)  [ sum of geometric progression]
where k id depth.


Now space complexity of fibonacci is n (where n is the input argument)

                            5
                    4                3
            3            2         2        1
        2       1     1     0    1    0    
    1       0


    max depth of the tree is n - (not to confuse n with the no of nodes it the input argument)

Why the space complexity if max depth ?
Because the recursion stack will rise till max depth. leftmost branch fills the stack till n.
When we next branch the stack will be emptied and 5 and 4 will remain at the bottom

1               
2               1
3       ->      2   ->      1    
4               4           2
5               5           5