import java.util.LinkedList;

import java.util.*;

/* 
https://leetcode.com/problems/number-of-islands/
BFS to count islands
*/
class NumIslands {

    public static void main(String[] args) {
        NumIslands solution = new NumIslands();
        char[][] grid = new char[][] {
            {'1','1','1','1','0'},
            {'1','1','0','1','0'},
            {'1','1','0','0','0'},
            {'0','0','0','0','0'}
        };
        char[][] grid2 = new char[][] {
            {'1','1','1','0','1'},
            {'1','1','0','0','0'},
            {'1','0','0','1','1'},
            {'0','0','0','1','1'}
        };

        char[][] grid3 = new char[][] {
        {'1','1','1','1','1','0','1','1','1','1','1','1','1','1','1','0','1','0','1','1'},
        {'0','1','1','1','1','1','1','1','1','1','1','1','1','0','1','1','1','1','1','0'},
        {'1','0','1','1','1','0','0','1','1','0','1','1','1','1','1','1','1','1','1','1'},
        {'1','1','1','1','0','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1'},
        {'1','0','0','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1'},
        {'1','0','1','1','1','1','1','1','0','1','1','1','0','1','1','1','0','1','1','1'},
        {'0','1','1','1','1','1','1','1','1','1','1','1','0','1','1','0','1','1','1','1'},
        {'1','1','1','1','1','1','1','1','1','1','1','1','0','1','1','1','1','0','1','1'},
        {'1','1','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','1'},
        {'1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1'},
        {'0','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','1','1','1'},
        {'1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1'},
        {'1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1'},
        {'1','1','1','1','1','0','1','1','1','1','1','1','1','0','1','1','1','1','1','1'},
        {'1','0','1','1','1','1','1','0','1','1','1','0','1','1','1','1','0','1','1','1'},
        {'1','1','1','1','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','0'},
        {'1','1','1','1','1','1','1','1','1','1','1','1','1','0','1','1','1','1','0','0'},
        {'1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1'},
        {'1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1'},
        {'1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1'}
        };
        System.out.println("Solution: "+solution.numIslands(grid));
        System.out.println("Solution: "+solution.numIslands(grid2));
        System.out.println("Solution: "+solution.numIslands(grid3));
    }

    public int numIslands(char[][] grid) {
        int m = grid.length;
        int n = grid[0].length;
        int count = 0;
        for(int i=0;i<m;i++) {
            for(int j=0;j<n;j++) {
                if(grid[i][j] == '1'){
                    // System.out.println("in numislands: "+i+"-"+j);
                    count++;
                    bfs(grid,i,j,m,n);
                }
            }
        }
        return count;
    }

    private void bfs(char[][] grid, int i, int j, int m, int n) {
        Queue<int[]> queue = new LinkedList<int[]>();
        int[] rows = new int[]{0,0,1,-1};
        int[] cols = new int[]{1,-1,0,0};
        queue.add(new int[]{i,j});
        grid[i][j]='0';
        while(!queue.isEmpty()) {
            int[] curr = queue.poll();
            // System.out.println("in bfs curr: "+curr[0]+"-"+curr[1]);
            for(int k=0;k<4;k++) {
                int newRow = curr[0]+rows[k];
                int newCol = curr[1]+cols[k];
                if(valid(newRow,newCol,m,n) && grid[newRow][newCol] == '1') {
                    grid[newRow][newCol] = '0';
                    queue.add(new int[]{newRow,newCol});
                }
            }
        }
    }

    private boolean valid(int newRow, int newCol, int m, int n) {
        return newRow>=0 && newRow<m && newCol>=0 && newCol<n;
    }
}